import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from threading import Thread
import queue
import time
from utill.processor import Traveler

traveler = Traveler()
bot = telebot.TeleBot('7631980240:AAGri9lZHMVuyCCqFKaBh14zsSCDrFqfDbk')

user_processes = {}
user_data = {}
user_messages = {}

@bot.message_handler(commands=['start'])
def handle_start_command(message):
    if isinstance(message, dict):
        chat_id = message['chat']['id']
    else:
        chat_id = message.chat.id
    
    bot.send_chat_action(chat_id, 'typing')
    user_name = bot.get_chat(chat_id).first_name
    welcome_text = f"""
    –ü—Ä–∏–≤–µ—Ç, {user_name}! üëã –Ø —Ç–≤–æ–π AI-–≥–∏–¥ –ø–æ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.
    –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—É—Ä –ø–æ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—É –∏ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.
    """
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—É—Ä", callback_data="start_survey"))
    markup.add(types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
    
    try:
        photo = open('prev.jpg', 'rb')
        bot.send_photo(chat_id, photo, caption=welcome_text, reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        bot.send_message(chat_id, welcome_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    bot.send_chat_action(call.message.chat.id, 'typing')
    user_id = call.message.chat.id
    try:
        if call.data == "start_survey":
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–î–∞", callback_data="local_yes"),
                types.InlineKeyboardButton("–ù–µ—Ç", callback_data="local_no")
            )
            survey_message = bot.send_message(
                call.message.chat.id,
                "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –º–µ—Å—Ç–Ω—ã–º –∂–∏—Ç–µ–ª–µ–º?",
                reply_markup=markup
            )
            user_data[user_id] = {
                'survey_message_id': survey_message.message_id,
                'step': 'local_check'
            }

        elif call.data in ["local_yes", "local_no"]:
            user_data[user_id]['is_local'] = (call.data == "local_yes")
            
            markup = types.InlineKeyboardMarkup(row_width=5)
            buttons = [types.InlineKeyboardButton(str(i), callback_data=f"duration_{i}") 
                      for i in range(1, 6)]
            markup.add(*buttons)
            
            bot.edit_message_text(
                "–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ (–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π):",
                call.message.chat.id,
                user_data[user_id]['survey_message_id'],
                reply_markup=markup
            )
            user_data[user_id]['step'] = 'duration'

        elif call.data == "settings":
            bot.answer_callback_query(call.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        elif call.data.startswith("duration_"):
            duration = int(call.data.split('_')[1])
            user_data[user_id].update({
                'duration': duration,
                'transport': [],
                'step': 'transport'
            })
            
            markup = types.InlineKeyboardMarkup()
            transport_options = ["–ú–∞—à–∏–Ω–∞", "–ê–≤—Ç–æ–±—É—Å", "–í–µ–ª–æ—Å–∏–ø–µ–¥", "–ü–µ—à–∫–æ–º"]
            for option in transport_options:
                markup.add(types.InlineKeyboardButton(
                    option,
                    callback_data=f"transport_{option.lower()}"
                ))
            markup.add(types.InlineKeyboardButton("–≠—Ç–æ –≤—Å—ë", callback_data="transport_done"))
            
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è:",
                call.message.chat.id,
                user_data[user_id]['survey_message_id'],
                reply_markup=markup
            )

        elif call.data.startswith("transport_"):
            if call.data == "transport_done":
                if not user_data[user_id]['transport']:
                    bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è")
                    return
                    
                user_data[user_id]['step'] = 'interests'
                user_data[user_id]['interests'] = []
                
                markup = types.InlineKeyboardMarkup()
                interest_options = ["–ò—Å—Ç–æ—Ä–∏—è", "–ü—Ä–∏—Ä–æ–¥–∞", "–ù–∞—É–∫–∞", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "–°–ø–æ—Ä—Ç"]
                for option in interest_options:
                    markup.add(types.InlineKeyboardButton(
                        option,
                        callback_data=f"interests_{option.lower()}"
                    ))
                markup.add(types.InlineKeyboardButton("–≠—Ç–æ –≤—Å—ë", callback_data="interests_done"))
                
                bot.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:",
                    call.message.chat.id,
                    user_data[user_id]['survey_message_id'],
                    reply_markup=markup
                )
            else:
                transport = call.data.split('_')[1]
                if transport in user_data[user_id]['transport']:
                    user_data[user_id]['transport'].remove(transport)
                else:
                    user_data[user_id]['transport'].append(transport)
                
                markup = types.InlineKeyboardMarkup()
                transport_options = ["–ú–∞—à–∏–Ω–∞", "–ê–≤—Ç–æ–±—É—Å", "–í–µ–ª–æ—Å–∏–ø–µ–¥", "–ü–µ—à–∫–æ–º"]
                for option in transport_options:
                    markup.add(types.InlineKeyboardButton(
                        f"‚úì {option}" if option.lower() in user_data[user_id]['transport'] else option,
                        callback_data=f"transport_{option.lower()}"
                    ))
                markup.add(types.InlineKeyboardButton("–≠—Ç–æ –≤—Å—ë", callback_data="transport_done"))
                
                bot.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è:",
                    call.message.chat.id,
                    user_data[user_id]['survey_message_id'],
                    reply_markup=markup
                )

        elif call.data.startswith("interests_"):
            if call.data == "interests_done":
                if not user_data[user_id]['interests']:
                    bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å")
                    return
                    
                bot.edit_message_text(
                    "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:",
                    call.message.chat.id,
                    user_data[user_id]['survey_message_id']
                )
                user_data[user_id]['step'] = 'wishes'
            else:
                interest = call.data.split('_')[1]
                if interest in user_data[user_id]['interests']:
                    user_data[user_id]['interests'].remove(interest)
                else:
                    user_data[user_id]['interests'].append(interest)
                
                markup = types.InlineKeyboardMarkup()
                interest_options = ["–ò—Å—Ç–æ—Ä–∏—è", "–ü—Ä–∏—Ä–æ–¥–∞", "–ù–∞—É–∫–∞", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", " –ò—Å–∫—É—Å—Å—Ç–≤–æ", "–°–ø–æ—Ä—Ç"]
                for option in interest_options:
                    markup.add(types.InlineKeyboardButton(
                        f"‚úì {option}" if option.lower() in user_data[user_id]['interests'] else option,
                        callback_data=f"interests_{option.lower()}"
                    ))
                markup.add(types.InlineKeyboardButton("–≠—Ç–æ –≤—Å—ë", callback_data="interests_done"))
                
                bot.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:",
                    call.message.chat.id,
                    user_data[user_id]['survey_message_id'],
                    reply_markup=markup
                )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±–µ–∫–∞: {str(e)}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    finally:
        bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    bot.send_chat_action(message.chat.id, 'typing')
    user_id = message.chat.id
    if user_id in user_data:
        if user_data[user_id]['step'] == 'wishes':
            user_data[user_id]['wishes'] = message.text
            
            summary = f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n\n" \
                     f"üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {user_data[user_id]['duration']} –¥–Ω–µ–π\n" \
                     f"üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {', '.join(user_data[user_id]['transport'])}\n" \
                     f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_data[user_id]['interests'])}\n" \
                     f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {user_data[user_id]['wishes']}"
            
            bot.edit_message_text(
                summary,
                message.chat.id,
                user_data[user_id]['survey_message_id']
            )
            
            processing_message = bot.send_message(
                message.chat.id,
                "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            
            out = [
                user_data[user_id]['duration'],
                user_data[user_id]['transport'],
                user_data[user_id]['interests'],
                user_data[user_id]['wishes']
            ]
            
            try:
                print(out)
                start_neuro_process(message, out)
                user_data[user_id]['step'] = 'chat'
                markup = ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(KeyboardButton("–í—Ä–µ–º—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"))
                markup.add(KeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"))
                #bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
            except Exception as e:
                bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞: {str(e)}")
        
        elif user_data[user_id]['step'] == 'chat':
            if message.text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫":
                if user_id in user_processes:
                    user_processes[user_id]['active'] = False
                if user_id in user_data:
                    del user_data[user_id]
                bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...", reply_markup=ReplyKeyboardRemove())
                handle_start_command(message)
            elif message.text == "–í—Ä–µ–º—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞":
                if user_id in user_processes and user_processes[user_id]['active']:
                    user_processes[user_id]['input_queue'].put("–í—Ä–µ–º—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            elif user_id in user_processes and user_processes[user_id]['active']:
                user_processes[user_id]['input_queue'].put(message.text)
            else:
                bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –ø—Ä–æ—Ü–µ—Å—Å –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                handle_start_command(message)
    
    elif message.text == "–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—É—Ä":
        start_survey(message)
    else:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º")

def start_neuro_process(message, out):
    user_id = message.chat.id
    
    if user_id in user_processes:
        user_processes[user_id]['active'] = False
    
    input_queue = queue.Queue()
    output_queue = queue.Queue()
    
    def run_process():
        try:
            traveler.process_only_corrector(traveler.process_only_router(out, user_id, input_queue, output_queue), user_id, input_queue, output_queue)
        except Exception as e:
            bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            if user_id in user_processes:
                user_processes[user_id]['active'] = False

    process_thread = Thread(target=run_process)
    process_thread.start()
    
    user_processes[user_id] = {
        'thread': process_thread,
        'input_queue': input_queue,
        'output_queue': output_queue,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        'active': True
    }
    
    Thread(target=handle_output, args=(user_id,)).start()

def handle_output(user_id):
    while user_id in user_processes and user_processes[user_id]['active']:
        try:
            output = user_processes[user_id]['output_queue'].get(timeout=1)
            bot.send_message(user_id, output)
            
            if "–°–ø–∞—Å–∏–±–æ!" in output or "–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω." in output:
                if user_id in user_processes:
                    user_processes[user_id]['active'] = False
                if user_id in user_data:
                    del user_data[user_id]
                bot.send_message(user_id, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...", reply_markup=ReplyKeyboardRemove())
                bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
                break
                
        except queue.Empty:
            pass
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            user_processes[user_id]['active'] = False
            bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", 
                           reply_markup=ReplyKeyboardRemove())
            bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
            break

def run_bot():
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥...")
            time.sleep(3)

if __name__ == '__main__':
    run_bot()